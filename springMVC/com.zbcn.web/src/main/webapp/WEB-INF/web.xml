<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:/applicationContext.xml</param-value>
    </context-param>
    <!--在上下文context-param中设置profile.default的默认值： 可选-->
    <context-param>
        <param-name>spring.profiles.default</param-name>
        <param-value>dev</param-value>
    </context-param>

    <!-- 多环境配置 在上下文context-param中设置profile.active的默认值 -->
    <!-- 设置active后default失效，web启动时会加载对应的环境信息 -->
<!--    <context-param>-->
<!--        <param-name>spring.profiles.active</param-name>-->
<!--        <param-value>test</param-value>-->
<!--    </context-param>-->

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--自定义监听器监听多环境配置中激活的prifile-->
    <listener>
        <listener-class>com.zbcn.web.pub.listener.ProfileContextListener</listener-class>
    </listener>
    
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--配置dispatcher.xml作为mvc的配置文件-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:/dispatcher-servlet.xml</param-value>
        </init-param>
        <!--多环境支持 可选-->
        <init-param>
            <param-name>spring.profiles.default</param-name>
            <param-value>dev</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <!--添加异步支持：可选-->
        <async-supported>true</async-supported>
    </servlet>
    <!--
   /* 和/ 的区别：
       /* ：覆盖所有其它的servlet，不管你发出了什么样的请求，最终都会在这个servlet中结束。会匹配所有的url：路径型的和后缀型的url(包括/springmvc，.jsp，.js和*.html等)。
       /: 覆盖任何其它的servlet。它仅仅替换了servlet容器中内建的默认servlet.种形式通常只用来请求静态资源（CSS/JS/image等）和展示目录的列表.会匹配到/springmvc这样的路径型url，不会匹配到模式为*.jsp
   https://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern
   -->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--拦截器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- logback -->
    <context-param>
        <param-name>logbackConfigLocation</param-name>
        <param-value> classpath:/logback.xml</param-value>
    </context-param>
    <listener>
        <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
    </listener>

    <!--自定义contextListener-->
    <listener>
        <listener-class>com.zbcn.web.listener.MyDataContextListener</listener-class>
    </listener>
</web-app>