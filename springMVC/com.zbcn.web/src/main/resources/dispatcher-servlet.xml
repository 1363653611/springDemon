<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd">

<!--启用spring的一些annotation -->
    <context:annotation-config/>
    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>
    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/statics/images/"/>
    <!--这句要加上，要不然可能会访问不到静态资源，具体作用自行百度-->
    <mvc:default-servlet-handler />

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>
    <!-- 自动扫描装配 -->
    <context:component-scan base-package="com.zbcn.web">
    </context:component-scan>

    <!--拦截器-->
    <mvc:interceptors>
        <!-- 使用 bean 定义一个 Interceptor，直接定义在 mvc:interceptors 下面的 Interceptor 将拦截所有的请求 -->
        <bean class="com.zbcn.web.pub.intercepter.HeaderParamsCheckInterceptor" />
       <!--返回值问题拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!-- 定义在 mvc:interceptor 下面的 Interceptor，表示对特定的请求进行拦截 -->
            <bean class="com.zbcn.web.pub.intercepter.ResponseResultInterceptor"/>
        </mvc:interceptor>
        <!--跨域兼容问题拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/cors/**"/>
            <bean class="com.zbcn.web.pub.intercepter.AllowCrossDomainInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <context:property-placeholder location="classpath:config.properties"/>
    <!--多环境配置-->
    <beans profile="dev">
        <!-- 只扫描开发环境下使用的类 -->
       <!-- <context:component-scan base-package="com.zbcn.web.env.dev" />-->
        <!-- 加载开发使用的配置文件 -->
        <!--<util:properties id="config" location="classpath:dev/config.properties"/>-->
        <context:property-placeholder location="classpath:dev/config.properties"/>
    </beans>
    <beans profile="prod">
        <!-- 只扫描生产环境下使用的类 -->
        <!--<context:component-scan
                base-package="com.zbcn.web.env.prod" />-->
        <!-- 加载生产使用的配置文件 -->
        <!--<util:properties id="config" location="classpath:prod/config.properties"/>-->
        <context:property-placeholder location="classpath:prod/config.properties"/>
    </beans>

</beans>