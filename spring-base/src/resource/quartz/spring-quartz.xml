<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <bean id="job1" class="com.zbcn.base.task.quartz.Job1"></bean>
    <bean id="myJobBean" class="com.zbcn.base.task.quartz.MyJobBean"></bean>
    <bean id="eBankJobBean" class="com.zbcn.base.task.quartz.EBankJobBean"></bean>
    
    <!-- 配置方法映射工厂类 -->
    <bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject" ref="myJobBean" />  
        <property name="targetMethod" value="printMessage" />  
    </bean>
    
    <!-- 这种封装的方式很简单，就是我定义了一个对象和它对应的方法。如果我们需要将它们封装成一个job了，只要把类的名字和 -->
    <!-- 对应的方法传进去就可以了。除了上述的JobDetail构造方式，还要一种更复杂一些，它的定义如下： -->
    <!--   这里因为要用到一些对象的引用，对这些对象或者参数的传递可以通过jobDataMap来处理。 -->
    <bean name="complexJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject" ref="eBankJobBean" />  
        <property name="targetMethod" value="printAnotherMessage" /> 
    </bean>   
    
    
    <!-- 继承 QuartzJobBean 的job 对象配置jobdatails 的方式-->
    <bean id="extendsJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    	<property name="jobClass" value="com.zbcn.base.task.quartz.Job1"/>
    	<property name="durability" value="true"/>
    </bean>
    <!-- Spring提供了2中触发器：SimpleTriggerBean 和 CronTriggerBean -->
    <!-- Trigger触发器 ：从第1秒开始，每3秒执行一次 -->                   
  	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
  		<property name="jobDetail" ref="simpleJobDetail"/>
  		<property name="startDelay" value="1000" />
        <property name="repeatInterval" value="3000" />  
  	</bean>
  	
  	 <!-- Trigger触发器 ：从第1秒开始，每5秒执行一次 -->
  	<bean id ="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
  		<property name="jobDetail" ref="complexJobDetail" />  
        <property name="cronExpression" value="0/5 * * * * ?" /> 
  	</bean>
  	
  	<bean id ="extednsCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
  		<property name="jobDetail" ref="extendsJobDetail" />  
        <property name="cronExpression" value="0/5 * * * * ?" /> 
  	</bean>
  	
  	<!-- 将触发器集 和 定时任务对象 成到调度器 -->
  	 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="jobDetails">  
            <list>  
                <ref bean="simpleJobDetail" />  
                <ref bean="complexJobDetail" />  
                <ref bean="extendsJobDetail"/>
            </list>  
        </property>  
  
        <property name="triggers">  
            <list>  
                <ref bean="simpleTrigger" />  
                <ref bean="cronTrigger" />  
                 <ref bean="extednsCronTrigger" />  
            </list>  
        </property>  
    </bean> 

</beans>